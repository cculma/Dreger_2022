subset = -c(1,2,3,5,8,13,21,34,55), data=Oats)
lsmeans(Oats.lme, list(poly ~ nitro, pairwise ~ Variety))
library(lsmeans)
install.packages("lsmeans")
library(lsmeans)
lsmeans(Oats.lme, list(poly ~ nitro, pairwise ~ Variety))
heasd(Oats)
head(Oats)
colnames(a1)
lev1 <- c("Entry_N","Entry","Block","Yi","C","X" )
lev1 <- c("Entry_N","Entry","Block","C","X" )
a1[,lev1] <- lapply(a1[,lev1], factor)
str(a1)
?lme
m0 <- lm(Yi ~ Block + Entry + C + X/C, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + Entry + Entry:X, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + Entry + Entry:C, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + Entry + Block:C, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + Entry , data = a1)
anova(m0)
m1 <- lme(Yi ~ Block + Entry, random = ~ 1 | Block/Entry, data = a1)
anova(m1)
m1 <- lme(Yi ~ Block + Entry, random = ~ 1 | C/Entry, data = a1)
anova(m1)
m1 <- lme(Yi ~ Block + Entry, random = ~ 1 | X/Entry, data = a1)
anova(m1)
m1 <- lme(Yi ~ Block + Entry, random = ~ 1 | Entry/C, data = a1)
anova(m1)
m1 <- lme(Yi ~ Block + Entry, random = ~ 1 | Entry/X, data = a1)
anova(m1)
m0 <- lm(Yi ~ Block + Entry + 1|Entry/C, data = a1)
m0 <- lm(Yi ~ Block + Entry + 1|Entry:C, data = a1)
m0 <- lm(Yi ~ Block + Entry + Entry:C, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + Entry + Entry:X, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block * Entry + X:Block, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block * Entry + C:Block, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block * Entry + C:Entry, data = a1)
anova(m0)
m2 <- lmerTest::lmer(Yi ~ Block * Entry + (1|C:Entry), data = a1)
anova(m2)
m0 <- lm(Yi ~ Entry * Block + C:Entry, data = a1)
anova(m0)
m2 <- lmerTest::lmer(Yi ~ Entry * Block + (1|C/Entry), data = a1)
anova(m2)
m2 <- lmerTest::lmer(Yi ~ Entry + Block + (1|C/Entry), data = a1)
anova(m2)
m2 <- lmer(Yi ~ C + Entry + Block + (1|C/Entry), data = a1)
library(lme4)
m2 <- lmer(Yi ~ C + Entry + Block + (1|C/Entry), data = a1)
anova(m2)
m2 <- lmer(Yi ~ C + Entry + Block + (1|C/X), data = a1)
anova(m2)
m2 <- lmer(Yi ~ X + Entry + Block + (1|C/X), data = a1)
anova(m2)
m0 <- lm(Yi ~ Block + Entry + Entry:X, data = a1)
anova(m0)
m0 <- lm(Yi ~ C + Block + Entry + Entry:X, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + C + X %in% C, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + C + X + X %in% C, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + C + X + C %in% X, data = a1)
anova(m0)
m0 <- lm(Yi ~ Block + C + X + C/X, data = a1)
anova(m0)
m0 <- lm(Yi ~ Entry * Block + C + X + C:Entry, data = a1)
anova(m0)
lsmeans(m0)
m0 <- lm(Yi ~ Entry * Block + C + X + C:Entry, data = a1)
lsmeans(m0)
m0 <- lm(Yi ~ Entry * Block + C + X + C:Entry + C %in% X, data = a1)
anova(m0)
lsmeans(m0)
m0 <- lm(Yi ~ Entry * Block + C:Block, data = a1)
anova(m0)
lsmeans(m0)
m0 <- lm(Yi ~ Entry + Block + C:Block, data = a1)
anova(m0)
m0 <- lm(Yi ~ Entry + Block + Entry:Block, data = a1)
anova(m0)
lsmeans(m0)
m0 <- lm(Yi ~ Entry + Block + Entry/Block, data = a1)
anova(m0)
m0 <- lm(Yi ~ Entry + Block + Block/C, data = a1)
anova(m0)
lsmeans(m0)
summary(m0)
m1 <- lme(Yi ~ Block + Entry, random = ~ 1 | Entry/X, data = a1)
anova(m1)
lsmeans(m1)
m1 <- lme(Yi ~ Entry, random = ~ 1 | C/Block, data = a1)
anova(m1)
lsmeans(m1)
load("/home/hawkins/Documents/git/Dreger_2022/tidy_Dreger1.RData")
mod3 <- lmer(predicted.value ~ FD + loc + FD:loc
+ (1|year) + (1|cut) + (1|year:cut)
+ (1|FD:year) + (1|loc:year)
+ (1|FD:cut) + (1|loc:cut)
+ (1|FD:loc:year) + (1|FD:loc:cut) + (1|loc:year:cut)
+ (1|FD:loc:year:cut), data = data1)
ls_means(mod3, which = NULL, ddf="Kenward-Roger")
library(metan)
library(data.table)
library(lme4) # GLMM
library(car)
library(lmerTest) # ANOVA Table (replace it)
FD4 <- split(FD3[,-1], FD3$trait)
ls_means(mod3)
mod3 <- lmer(predicted.value ~ FD + loc + FD:loc
+ (1|year) + (1|cut) + (1|year:cut)
+ (1|FD:year) + (1|loc:year)
+ (1|FD:cut) + (1|loc:cut)
+ (1|FD:loc:year) + (1|FD:loc:cut) + (1|loc:year:cut)
+ (1|FD:loc:year:cut), data = data1)
mod4 <- update(mod3, REML=FALSE, verbose = 1)
ls_means(mod3)
ls_means(mod4)
mod6 <- lm(predicted.value ~ FD + loc + year + cut
+ FD:loc + FD:year + FD:cut
+ FD:loc:year + FD:loc:cut + FD:year:cut
+ FD:loc:year:cut, data = data1)
anova(mod6)
ls_means(mod6)
mod5 <- lmer(predicted.value ~ FD * loc * year * cut
+ (1|year) + (1|cut) + (1|year:cut)
+ (1|FD:year) + (1|loc:year)
+ (1|FD:cut) + (1|loc:cut)
+ (1|FD:loc:year) + (1|FD:loc:cut) + (1|loc:year:cut)
+ (1|FD:loc:year:cut), data = data1)
mod4 <- update(mod5, REML=FALSE, verbose = 1)
anova(mod4)
1:length(a6)
names(a6)
1:(length(ST01)
)
names(ST01)
data <- ST01[[16]]
lev2 <- colnames(data)[1:5]
data <- as.data.frame(data)
data[,lev2] <- lapply(data[,lev2], factor)
data1 <- na.omit(data)
head(data1)
FA_1 <- asreml::asreml(fixed = predicted.value ~ 1 + gen,
random = ~ fa(env, 1):id(gen) + loc + year + cut,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
FA_1 <- update.asreml(FA_1)
library(tidyverse)
library(ggcorrplot)
library(patchwork)
library(Matrix)
library(asreml)
library(asremlPlus)
FA_1 <- update.asreml(FA_1)
wald(FA_1)
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ fa(env, 1):id(gen) + year + cut,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
FA_2 <- update.asreml(FA_2)
wald(FA_2)
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc * year * cut,
random = ~ fa(env, 1):id(gen) + year + cut,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
rm(FA_2)
str(data1)
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc * year * cut,
random = ~ fa(env, 1):id(gen),
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc * year,
random = ~ fa(env, 1):id(gen) + cut,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ fa(env, 1):id(gen) + cut * year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
FA_2 <- update.asreml(FA_2)
wald(FA_2)
ASR1 <- asreml(fixed = predicted.value ~ 1 + gen * loc + year, random = cut, data = data1)
ASR1 <- asreml(fixed = predicted.value ~ gen * loc + year, random = cut, data = data1)
ASR1 <- asreml(fixed = predicted.value ~ gen * loc + year, random =env + cut, data = data1)
View(data1)
ASR1 <- asreml(fixed = predicted.value ~ gen * loc + year, random = ~ cut, data = data1)
summary(ASR1)
wald(ASR1,denDF="default",ssType="conditional")
ASR1 <- asreml(fixed = predicted.value ~ gen * loc + year, random = ~ cut + cut/year, data = data1)
ASR1 <- asreml(fixed = predicted.value ~ gen * loc + year, random = ~ cut + year/cut, data = data1)
summary(ASR1)
wald(ASR1,denDF="default",ssType="conditional")
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ fa(env, 1):id(gen) + cut + year/cut,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
wald(FA_2)
FA_2 <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ diag(env, 1):id(gen) + cut + year/cut,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
Diag <- asreml::asreml(fixed =  predicted.value ~ 1 + gen * loc,
random = ~ + diag(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
wald(Diag)
wald(Diag,denDF="default",ssType="conditional")
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ + idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
wald(US)
wald(US,denDF="default",ssType="conditional")
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ + idv(env):id(gen) + cut * year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
wald(US)
wald(US,denDF="default",ssType="conditional")
summary(US)
View(US)
US[["vparameters"]][["env:gen!env"]]
US[["coefficients"]][["fixed"]]
US[["coefficients"]][["random"]]
US[["vcoeff"]][["fixed"]]
US[["linear.predictors"]]
US[["deviance"]]
US[["nedf"]]
wald(US,denDF="default")
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc* cut * year,
random = ~ + idv(env):id(gen),
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ + idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
wald(US)
wald(US,denDF="default")
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc * env,
random = ~ + idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc + env,
random = ~ + idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
US <- asreml::asreml(fixed = predicted.value ~ 1 + gen * loc,
random = ~ + idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
?wald
wald(US)
wald(US,denDF="none",ssType="incremental")
wald(US,denDF="default")
predict(US,classify=list("gen","loc","gen:loc"), sed=list("gen:loc"=T))
predict(US, classify=list("gen","loc","gen:loc"))
predict.asreml(US, classify='env:gen', sed = F)
predict.asreml(US, classify= list('env:gen', 'gen'), sed = F)
predict.asreml(US, classify= 'env:gen', sed = T)
predict.asreml(US, classify= 'gen', sed = T)
147.73/4
36.9325/1.8
a1 <- read.csv("~/Documents/git/Dreger_2022/raw_data/example_AOV.csv")
View(a1)
m0 <- lm(Bath ~ Qual, data = a1)
m0 <- lm(a1$Qual ~ Batch, data = a1)
anova(m0)
a1$Batch <- as.factor(a1$Batch)
m0 <- lm(a1$Qual ~ Batch, data = a1)
m0 <- lm(a1$Qual ~ Batch, data = a1)
anova(m0)
m2 <- lmer(Qual ~ (1|Batch), data = a1)
anova(m2)
ranova(m2)
anova(m0)
m2 = lmer(Qual ~ 1 + (1|Batch), REML=TRUE, data=a1)
summary(m2)
confint.merMod(m2, level=0.95, method="boot", nsim=5000,
boot.type="perc", quiet=FALSE)
mod3
mod3 <- lmer(predicted.value ~ FD + loc + FD:loc
+ (1|year) + (1|cut) + (1|year:cut)
+ (1|FD:year) + (1|loc:year)
+ (1|FD:cut) + (1|loc:cut)
+ (1|FD:loc:year) + (1|FD:loc:cut) + (1|loc:year:cut)
+ (1|FD:loc:year:cut), data = data1)
data1 <- FD4[[1]]
data1 <- as.data.frame(data1)
lev4 <- colnames(data1)[c(1:5,7:8)]
data1[,lev4] <- lapply(data1[,lev4], factor)
str(data1)
data1 <- droplevels(data1)
mod3 <- lmer(predicted.value ~ FD + loc + FD:loc
+ (1|year) + (1|cut) + (1|year:cut)
+ (1|FD:year) + (1|loc:year)
+ (1|FD:cut) + (1|loc:cut)
+ (1|FD:loc:year) + (1|FD:loc:cut) + (1|loc:year:cut)
+ (1|FD:loc:year:cut), data = data1)
summary(mod3)
anova(mod3)
summary(mod3)
lme4::VarCorr(mod3)
vc_fixed <- as.matrix(vcov(mod3))
vc_fixed
# Variance of fixed effects:
var_fixed <- diag(vc_fixed)
var_fixed
se_fixed <- sqrt(var_fixed)
se_fixed
install.packages("insight")
library(insight)
get_variance(mod3)
get_variance_fixed(mod3)
get_variance_residual(mod3)
get_df(mod3)
summary(mod3)
get_residuals(mod3)
get_deviance(mod3)
find_random(mod3)
find_response(mod3)
get_random(mod3)
is_mixed_model(mod3)
is_nested_models(mod3)
find_parameters(mod3)
rm(list = ls())
library(tidyverse)
library(ggcorrplot)
library(patchwork)
library(Matrix)
library(asreml)
library(asremlPlus)
setwd("~/Documents/git/Dreger_2022/raw_data/")
load("~/Documents/git/Dreger_2022/tidy_Dreger1.RData")
a6 <- a5 %>% inner_join(., c201, by= c("loc", "block", "Cutting", "Year", "trait")) %>% inner_join(., c202, by= c("loc", "block", "Cutting", "Year", "trait")) %>% unite("env", c(loc, Year, Cutting, trait), sep = "_", remove = F) %>% inner_join(., FD2, by = "gen")
head(a6)
a6 <- split(a6[,-1], a6$env)
names(a6)
ST0 <- list()
for (i in 1:length(a6)) {
data <- a6[[i]]
data <- data[order(data$row, data$col), ]
# m3 <- asreml::asreml(fixed = raw ~ 1 + cov1 + cov2,
#                      random = ~ block + gen,
#                      data = data,
#                      na.action = list(x = "include", y = "include"))
m3 <- asreml::asreml(fixed = raw ~ gen + block,
data = data,
na.action = list(x = "include", y = "include"))
preds <- predict(m3, classify = "gen", vcov = TRUE)
blup <- preds$pvals
blup <- blup[1:3]
blup$weight <- (1/blup$std.error)^2
ST0[[length(ST0)+1]] <- blup
}
17 + 16 + 16 + 20 + 24 + 24 + 27 + 26 + 18
length(ST0)
length(a6)
names(ST0) <- names(a6)
ST0 <-rbindlist(ST0, use.names=TRUE, fill=TRUE, idcol="trait")
head(ST0)
library(tidyverse)
library(ggcorrplot)
library(patchwork)
library(Matrix)
library(asreml)
library(asremlPlus)
names(ST0)
ST0 <-rbindlist(ST0, use.names=TRUE, fill=TRUE, idcol="trait")
library(data.table)
ST0 <-rbindlist(ST0, use.names=TRUE, fill=TRUE, idcol="trait")
head(ST0)
ST01 <- ST0 %>% separate(1, c("loc", "year", "cut", "trait"), sep = "_", remove = F, convert = FALSE, extra = "merge") %>% unite("env", c(loc, year, cut), sep = "_", remove = F) %>% inner_join(., FD2, by = "gen")
head(ST01)
# ST01 <- split(ST01[,-2], ST01$env)
ST01 <- split(ST01[,-6], ST01$trait)
names(ST01)
names(ST01)
data <- ST01[[16]]
str(data)
lev2 <- colnames(data)[c(1:5,9,10)]
data <- as.data.frame(data)
data[,lev2] <- lapply(data[,lev2], factor)
head(data)
save.image("~/Documents/git/Dreger_2022/tidy_Dreger1.RData")
rm(ST1.1)
ST1 <- list()
ST3 <- list()
for (i in 1:(length(ST01))) {
data <- ST01[[i]]
lev2 <- colnames(data)[c(1:5,9,10)]
data <- as.data.frame(data)
data[,lev2] <- lapply(data[,lev2], factor)
data1 <- na.omit(data)
head(data1)
#
#   FA_1 <- asreml::asreml(fixed = predicted.value ~ 1 + gen,
#                          random = ~ fa(env, 1):id(gen) + loc + year + cut,
#                          data = data1, na.action = list(x = "include", y = "include"),
#                          weights = weight, family = asreml::asr_gaussian(dispersion = 1))
#   FA_1 <- update.asreml(FA_1)
US <- asreml::asreml(fixed = predicted.value ~ FD * loc ,
random = ~ idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
W1 <- wald.asreml(US)
ST3[[length(ST3)+1]] <- W1
current.asrt <- as.asrtests(US, NULL, NULL)
current.asrt <- rmboundary.asrtests(current.asrt)
ST2 <- list()
for (j in 1:length(lev6)) {
diffs <- predictPlus(classify = lev6[j],
asreml.obj = US,
wald.tab = current.asrt$wald.tab,
present = c("FD","gen","loc","year","cut"))
ST2[[length(ST2)+1]] <- diffs
}
names(ST2) <- lev5
ST1[[length(ST1)+1]] <- ST2
}
#############
lev6 <- c("FD","loc","year","cut",
"FD:loc","FD:year","FD:cut","loc:year","loc:cut","year:cut",
"FD:loc:year","FD:loc:cut","loc:year:cut","FD:loc:year:cut")
lev5 <- c("FD","loc","year","cut",
"FD_loc","FD_year","FD_cut","loc_year","loc_cut","year_cut",
"FD_loc_year","FD_loc_cut","loc_year_cut","FD_loc_year_cut")
ST1 <- list()
ST3 <- list()
for (i in 1:(length(ST01))) {
data <- ST01[[i]]
lev2 <- colnames(data)[c(1:5,9,10)]
data <- as.data.frame(data)
data[,lev2] <- lapply(data[,lev2], factor)
data1 <- na.omit(data)
head(data1)
#
#   FA_1 <- asreml::asreml(fixed = predicted.value ~ 1 + gen,
#                          random = ~ fa(env, 1):id(gen) + loc + year + cut,
#                          data = data1, na.action = list(x = "include", y = "include"),
#                          weights = weight, family = asreml::asr_gaussian(dispersion = 1))
#   FA_1 <- update.asreml(FA_1)
US <- asreml::asreml(fixed = predicted.value ~ FD * loc ,
random = ~ idv(env):id(gen) + cut + year,
data = data1, na.action = list(x = "include", y = "include"),
weights = weight, family = asreml::asr_gaussian(dispersion = 1))
W1 <- wald.asreml(US)
ST3[[length(ST3)+1]] <- W1
current.asrt <- as.asrtests(US, NULL, NULL)
current.asrt <- rmboundary.asrtests(current.asrt)
ST2 <- list()
for (j in 1:length(lev6)) {
diffs <- predictPlus(classify = lev6[j],
asreml.obj = US,
wald.tab = current.asrt$wald.tab,
present = c("FD","gen","loc","year","cut"))
ST2[[length(ST2)+1]] <- diffs
}
names(ST2) <- lev5
ST1[[length(ST1)+1]] <- ST2
}
length(ST1)
length(ST01)
names(ST1) <- names(ST01)
names(ST3) <- names(ST01)
save.image("~/Documents/git/Dreger_2022/tidy_Dreger1.RData")
names(ST1[1])
data <- ST1[[1]]
names(data[[1]])
names(ST1[1])
View(ST3)
ST3[["ADF"]]
ST3[["aNDF"]]
ST3[["Ash"]]
ST3[["Ca"]]
ST3[["Cprot"]]
ST3[["DM"]]
ST3[["dNDF30"]]
ST3[["dNDF48"]]
ST3[["K"]]
##########
data <- ST3[[1]]
class(data)
class(data)
write.xlsx(data, file="~/Documents/git/Dreger_2022/statistical_results/assay.xlsx", sheetName="predictions", row.names=F)
library(xlsx)
library(reshape2)
write.xlsx(data, file="~/Documents/git/Dreger_2022/statistical_results/assay.xlsx", sheetName="predictions", row.names=F)
write.xlsx(data, file="~/Documents/git/Dreger_2022/statistical_results/assay.xlsx", sheetName="predictions", row.names=T, showNA = F)
current.asrt$wald.tab
names(ST3)
##########
# wald
setwd("~/Documents/git/Dreger_2022/statistical_results/wald/")
wb <- createWorkbook()
saveWorkbook(wb, paste0(names(ST3[i]), '.wald.xlsx'))
lapply(names(ST3), function(x) write.xlsx(ST3[[x]], paste0(names(ST3[i]), '.wald.xlsx'), sheetName=x, append=T, row.names=T, showNA = F))
saveWorkbook(wb, 'dreger.wald.xlsx'))
saveWorkbook(wb, 'dreger.wald.xlsx')
lapply(names(ST3), function(x) write.xlsx(ST3[[x]], paste0(names(ST3[i]), '.wald.xlsx'), sheetName=x, append=T, row.names=T, showNA = F))
lapply(names(ST3), function(x) write.xlsx(ST3[[x]], 'dreger.wald.xlsx', sheetName=x, append=T, row.names=T, showNA = F))
######
summary(US)
