grouped_ggbetweenstats(data = a2, x = dosage, y = ST3_FD_OR,
grouping.var = marker,
plot.type = "box",
type = "p",
pairwise.display = "s",
p.adjust.method = "fdr",
ggtheme = ggplot2::theme_classic(),
package = "ggsci",
palette = "default_jco",
outlier.tagging = TRUE,
outlier.label = gen,
plotgrid.args = list(nrow = 8))
a2 <- a1 %>% dplyr::select(Chr3_5642102, ST1_Yi_OR_2020_1) # FHY3
a2[,1] <- as.factor(a2[,1])
levels(a2[,1])
a2 <- a2 %>% rownames_to_column("gen")
colnames(a2)
ggbetweenstats(data = a2, x = Chr3_5642102, y = ST1_Yi_OR_2020_1,
plot.type = "box",
type = "robust",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
package = "ggsci",
palette = "nrc_npg",
point.args = list(alpha = 0),
ggtheme = ggplot2::theme_classic(),
outlier.tagging = TRUE,  outlier.label = gen)
levels(a2$Chr3_5642102)
a2$Chr3_5642102
levels(a2$Chr3_5642102)
a2$Chr3_5642102 <- gsub("0", "1", a2$Chr3_5642102)
levels(a2$Chr3_5642102)
a2[,1] <- as.factor(a2[,1])
levels(a2[,1])
levels(a2$Chr3_5642102)
str(a2)
a2$Chr3_5642102 <- as.factor(a2$Chr3_5642102)
str(a2)
levels(a2$Chr3_5642102)
ggbetweenstats(data = a2, x = Chr3_5642102, y = ST1_Yi_OR_2020_1,
plot.type = "box",
type = "robust",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
package = "ggsci",
palette = "nrc_npg",
point.args = list(alpha = 0),
ggtheme = ggplot2::theme_classic(),
outlier.tagging = TRUE,  outlier.label = gen)
a1 <- read.csv("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/AllSamples_Ms_filter_q30_imputed_GWASPoly_contigRemoved.txt", check.names = F)
a1[1:5,1:5]
a2 <- a1[,c(1:3)]
a3 <- subset(a2,
Chrom == "Chr1" |
Chrom == "Chr2" |
Chrom == "Chr3" |
Chrom == "Chr4" |
Chrom == "Chr5" |
Chrom == "Chr6" |
Chrom == "Chr7" |
Chrom == "Chr8")
str(a3)
head(a3)
View(a3)
a3 %>% dplyr::filter(Marker %in% c(23700:23730))
View(a3)
a3 %>% dplyr::filter(Marker %in% c(25100:25110))
a2 <- a1 %>% dplyr::select(Chr3_5642102, ST1_Yi_OR_2020_1) # FHY3
a2 <- a1 %>% dplyr::select(Chr3_5642102, ST1_Yi_OR_2020_1) # FHY3
a1 <- read.table("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/markers2.3.tsv", row.names = 1, sep = "\t", header = T)
a3 <- read.csv("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/FD.csv")
a2 <- a1 %>% dplyr::select(Chr3_5642102, ST1_Yi_OR_2020_1) # FHY3
a2[,1] <- as.factor(a2[,1])
levels(a2[,1])
a2 <- a2 %>% rownames_to_column("gen")
str(a2)
ggbetweenstats(data = a2, x = Chr3_5642102, y = ST1_Yi_OR_2020_1,
plot.type = "box",
type = "robust",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
package = "ggsci",
palette = "nrc_npg",
point.args = list(alpha = 0),
ggtheme = ggplot2::theme_classic(),
outlier.tagging = TRUE,  outlier.label = gen)
a2 <- a1 %>% dplyr::select(Chr3_5642102, ST0_Yi_OR_2020_1) # FHY3
a2[,1] <- as.factor(a2[,1])
levels(a2[,1])
a2 <- a2 %>% rownames_to_column("gen")
levels(a2$Chr3_5642102)
colnames(a2)
ggbetweenstats(data = a2, x = Chr3_5642102, y = ST0_Yi_OR_2020_1,
plot.type = "box",
type = "robust",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
package = "ggsci",
palette = "nrc_npg",
point.args = list(alpha = 0),
ggtheme = ggplot2::theme_classic(),
outlier.tagging = TRUE,  outlier.label = gen)
ggbetweenstats(data = a2, x = Chr3_5642102, y = ST0_Yi_OR_2020_1,
plot.type = "box",
type = "p",
pairwise.comparisons = TRUE,
p.adjust.method = "fdr",
package = "ggsci",
palette = "nrc_npg",
point.args = list(alpha = 0),
ggtheme = ggplot2::theme_classic(),
outlier.tagging = TRUE,  outlier.label = gen)
rm(list = ls()) # clean Global Environment
# setwd("~/Documents/Cesar/blup_data/Roza2019/Analysis_2021/GWAS/")
# setwd("~/OneDrive - Washington State University (email.wsu.edu)/Roza_2019/git/Roza2019/")
session_info()
library(GWASpoly)
library(tidyverse)
library(vcfR)
load("/Users/cesarmedina/Library/CloudStorage/OneDrive-WashingtonStateUniversity(email.wsu.edu)/Sen_2020/yield_FD/RData/PH_WA_HC_data_3.3.RData")
library(foreach)
library(doParallel)
data <- PH_WA_HC_data_3.3
traits <- names(data@scores)
n.trait <- length(traits)
models <- colnames(data@scores[[1]])
model2 <- gsub("-ref","",models,fixed=T)
model2 <- unique(gsub("-alt","",model2,fixed=T))
n.model <- length(models)
methods <- c("M.eff","Bonferroni","FDR","permute")
threshold <- matrix(NA,n.trait,n.model)
colnames(threshold) <- models
rownames(threshold) <- traits
chrom <- levels(data@map[,2])
n.chrom <- length(chrom)
r2 <- vector("list",n.chrom)
names(r2) <- chrom
seq_along(chrom)
chrom
ix <- which(data@map[,2]=="Chr1")
r2
r2[[1]] <- as(cor(data@geno[,ix])^2,"dspMatrix")
r2 <- vector("list",n.chrom)
names(r2) <- chrom
r2
chrom
chrom
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
r2
foreach(i = seq_along(chrom)) %dopar% {
ix <- which(data@map[,2]==i)
r2[[i]] <- as(cor(data@geno[,ix])^2,"dspMatrix")
}
i
registerDoParallel(cl)
chrom
for_test <- function(chrom) {
for (i in chrom) {
ix <- which(data@map[,2]==i)
r2[[1]] <- as(cor(data@geno[,ix])^2,"dspMatrix")
}
}
str(for_test())
for_test <- function(i) {
ix <- which(data@map[,2]==i)
r2[[1]] <- as(cor(data@geno[,ix])^2,"dspMatrix")
}
str(for_test())
rm(list = ls()) # clean Global Environment
# setwd("~/Documents/Cesar/blup_data/Roza2019/Analysis_2021/GWAS/")
# setwd("~/OneDrive - Washington State University (email.wsu.edu)/Roza_2019/git/Roza2019/")
session_info()
library(GWASpoly)
library(tidyverse)
library(vcfR)
load("/Users/cesarmedina/Library/CloudStorage/OneDrive-WashingtonStateUniversity(email.wsu.edu)/Sen_2020/yield_FD/RData/PH_WA_HC_data_3.3.RData")
traits <- names(data@scores)
n.trait <- length(traits)
library(foreach)
library(doParallel)
data <- PH_WA_HC_data_3.3
traits <- names(data@scores)
n.trait <- length(traits)
models <- colnames(data@scores[[1]])
model2 <- gsub("-ref","",models,fixed=T)
model2 <- unique(gsub("-alt","",model2,fixed=T))
n.model <- length(models)
methods <- c("M.eff","Bonferroni","FDR","permute")
threshold <- matrix(NA,n.trait,n.model)
colnames(threshold) <- models
rownames(threshold) <- traits
chrom <- levels(data@map[,2])
n.chrom <- length(chrom)
r2 <- vector("list",n.chrom)
names(r2) <- chrom
chrom
1:seq_along(chrom)
i <- sample(1:seq_along(chrom))
seq_along(chrom)
r2
chrom
for (i in seq_along(chrom)) {            # 2. sequence
ix <- which(data@map[,2]==i)
r2[[i]] <- as(cor(data@geno[,ix])^2,"dspMatrix")    # 3. body
}
View(r2)
for (i in chrom) {
ix <- which(data@map[,2]==i)
r2[[i]] <- as(cor(data@geno[,ix])^2,"dspMatrix")
}
View(r2)
rownames(r2[[1]])
class(rownames(r2[[1]]))
1:n.model
models[1]
model <-  models[1]
trait
trait <- traits[1]
iv <- which(!is.na(data@scores[[trait]][,model]))
iv
scores <- as.vector(data@scores[[trait]][iv,model])
scores
me <- 0
chrom
ix <- data@map[intersect(iv,which(data@map[,2]=="Chr1")),1]
class(ix)
ix
class(rownames(r2[[1]]))
r2[[1]][1:5,1:5]
rownames(r2[[1]]) <- as.integer(rownames(r2[[1]]))
r2[[1]][1:5,1:5]
colnames(r2[[1]])
rownames(r2[[1]])
colnames(r2[[1]]) <- as.integer(colnames(r2[[1]]))
r2[[1]][1:5,1:5]
class(rownames(r2[[1]]))
class(rownames(r2[[1]]))
row.names(rownames(r2[[1]])) <- attr(r2[[1]], "row.names")
class(rownames(r2[[1]]))
row.names(rownames(r2[[1]])) <- attr(r2[[1]], "row.names")
rownames(r2[[1]]) <- as.integer(rownames(r2[[1]]))
r2[[1]][1:5,1:5]
class(rownames(r2[[1]]))
class(r2[[1]])
Keff <- function(r2,alpha) {
m <- nrow(r2)
if (m > 1) {
Q <- sqrt(r2)
Q[upper.tri(Q,diag=T)] <- NA
rmax <- apply(Q[-1,],1,max,na.rm=T)
kappa <- sqrt(1-rmax^(-1.31*log10(alpha)))
return(1+sum(kappa))
} else {
return(1)
}
}
level <- 0.05
r2[[chr]][ix,ix]
r2[["Chr1"]][ix,ix]
class(ix)
ix <- data@map[intersect(iv,which(data@map[,2]=="Chr1")),1]
ix <- as.character(ix)
class(ix)
r2[["Chr1"]][ix,ix]
ix <- data@map[intersect(iv,which(data@map[,2]=="Chr1")),1]
ix <- as.character(ix)
ix <- data@map[intersect(iv,which(data@map[,2]=="Chr1")),1]
class(ix)
Keff
class(ix)
r2[["Chr1"]][ix,ix]
ix <- as.character(ix)
Keff(r2=r2[["Chr1"]][ix,ix],alpha=level)
cl
Keff <- function(r2) {
m <- nrow(r2)
if (m > 1) {
Q <- sqrt(r2)
Q[upper.tri(Q,diag=T)] <- NA
rmax <- apply(Q[-1,],1,max,na.rm=T)
kappa <- sqrt(1-rmax^(-1.31*log10(0.05)))
return(1+sum(kappa))
} else {
return(1)
}
}
Keff
n.core=6
cl <- makeCluster(n.core)
clusterExport(cl=cl,varlist=NULL)
for (chr in chrom) {
ix <- data@map[intersect(iv,which(data@map[,2]==chr)),1]
ix <- as.character(ix)
class(ix)
if (length(ix)>1) {
me <- parLapply(cl, r2, Keff)
#            me <- me + Keff(r2=r2[["Chr1"]][ix,ix],alpha=level)
} else {
me <- me + 1
}
}
31.6-28.7
a1 <- read.csv("~/Downloads/porometer1.csv")
cor(a1$Conductance.mmol..m..s., a1$Resistance.s.m)
head(a1)
simple.fit = lm(Conductance.mmol..m..s. ~ Conductance.mmol..m..s., data=a1)
summary(simple.fit)
simple.fit$coefficients[2]
simple.fit$coefficients
simple.fit = lm(Conductance.mmol..m..s. ~ Resistance.s.m, data=a1)
summary(simple.fit)
simple.fit$coefficients[2]
simple.fit$coefficients[1]
a2 <- read.csv("~/Downloads/porometer2.csv")
View(a2)
Y <- 	simple.fit$coefficients[2] * a2$Resis + 	simple.fit$coefficients[1]
Y
a2$cond <- 	simple.fit$coefficients[2] * a2$Resis + 	simple.fit$coefficients[1]
View(a2)
write.csv(a2, "~/Downloads/porometer2.csv", quote = F, row.names = F)
100-39.04
norm_vec <- function(x) sqrt(sum(x^2))
c1 <- c(25,2,5)
c1
norm_vec(c1)
25**2
25^2
28*28
32*32
11*32
library(metan)
library(tidyverse)
library(data.table)
load("/Users/cesarmedina/Library/CloudStorage/OneDrive-WashingtonStateUniversity(email.wsu.edu)/Sen_2020/quality_2022/pheno/Dunn.RData")
LB_env <- list()
LB_gen <- list()
for (i in 1:(length(ST1))) {
a6 <- ST1[[i]]
a6 <- as_tibble(a6)
out <- superiority(a6, env = env, gen = gen, predicted.value)
env <- out[["predicted.value"]]$environments
gen <- out[["predicted.value"]]$index
LB_env[[length(LB_env)+1]] <- env
LB_gen[[length(LB_gen)+1]] <- gen
}
names(LB_env) <- names(ST1)
names(LB_gen) <- names(ST1)
LB_env.1 <-rbindlist(LB_env, use.names=TRUE, fill=TRUE, idcol="trait")
LB_gen.1 <-rbindlist(LB_gen, use.names=TRUE, fill=TRUE, idcol="trait")
head(LB_env.1)
head(LB_env.1)
head(LB_gen.1)
a6 <- ST1[[1]]
a6 <- as_tibble(a6)
out <- ge_acv(a6, env = env, gen = gen, predicted.value))
out <- ge_acv(a6, env = env, gen = gen, predicted.value)
View(out)
View(out[["predicted.value"]])
out <- out$predicted.value[,c(1,2)]
View(out)
LB_gen[[1]]
out2 <- LB_gen[[1]][,c(1,2)]
View(out2)
out3 <- inner_join(out2, out, by = "GEN")
View(out3)
mean(out3$Y)
mean(out3$ACV)
a <- mean(out3$Y)
b <- mean(out3$ACV)
a
a
out3$cluster[(out3$Y > a & out3$ACV < b), ] <- 1
View(out3)
out3[(out3$Y > a & out3$ACV < b), "cluster"] <- 1
View(out3)
out3[(out3$Y > a & out3$ACV > b), "cluster"] <- 2
out3[(out3$Y < a & out3$ACV > b), "cluster"] <- 3
out3[(out3$Y < a & out3$ACV < b), "cluster"] <- 4
CV1 <- list()
CV1 <- list()
for (i in 1:(length(ST1))) {
a6 <- ST1[[i]]
a6 <- as_tibble(a6)
out <- ge_acv(a6, env = env, gen = gen, predicted.value)
out <- out$predicted.value[,c(1,2)]
out2 <- LB_gen[[i]][,c(1,2)]
out3 <- inner_join(out2, out, by = "GEN")
a <- mean(out3$Y)
b <- mean(out3$ACV)
out3[(out3$Y > a & out3$ACV < b), "cluster"] <- 1
out3[(out3$Y > a & out3$ACV > b), "cluster"] <- 2
out3[(out3$Y < a & out3$ACV > b), "cluster"] <- 3
out3[(out3$Y < a & out3$ACV < b), "cluster"] <- 4
out3
CV1[[length(CV1)+1]] <- out3
}
names(CV1) <- names(ST1)
CV2 <-rbindlist(CV1, use.names=TRUE, fill=TRUE, idcol="trait")
View(CV2)
head(CV2)
CV3 <- CV2 %>% select(1,2,3) %>% spread(key = trait, value = Y)
CV4 <- CV2 %>% select(1,2,4) %>% spread(key = trait, value = ACV)
CV5 <- CV2 %>% select(1,2,5) %>% spread(key = trait, value = cluster)
View(CV3)
View(CV4)
View(CV5)
colnames(CV3)
colnames(CV3)[2:17]
colnames(CV3)[2:17] <- paste0(colnames(CV3)[2:17], "_mean")
colnames(CV4)[2:17] <- paste0(colnames(CV4)[2:17], "_CV")
colnames(CV5)[2:17] <- paste0(colnames(CV5)[2:17], "_cluster")
colnames(CV3)[2:17]
CV6 <- inner_join(CV3, CV4, by = "GEN")  inner_join(., CV5, by = "GEN")  %>% column_to_rownames("GEN") %>% select(sort(names(.))) %>% rownames_to_column("GEN")
CV6 <- inner_join(CV3, CV4, by = "GEN") %>% inner_join(., CV5, by = "GEN")  %>% column_to_rownames("GEN") %>% select(sort(names(.))) %>% rownames_to_column("GEN")
View(CV6)
CV6 <- inner_join(CV3, CV4, by = "GEN") %>% inner_join(., CV5, by = "GEN")
View(CV6)
CV3 <- CV2 %>% select(1,2,3) %>% spread(key = trait, value = Y)
CV4 <- CV2 %>% select(1,2,4) %>% spread(key = trait, value = ACV)
CV5 <- CV2 %>% select(1,2,5) %>% spread(key = trait, value = cluster)
colnames(CV3)[2:17] <- paste0(colnames(CV3)[2:17], "_1mean")
colnames(CV4)[2:17] <- paste0(colnames(CV4)[2:17], "_2CV")
colnames(CV5)[2:17] <- paste0(colnames(CV5)[2:17], "_3cluster")
CV6 <- inner_join(CV3, CV4, by = "GEN") %>% inner_join(., CV5, by = "GEN")  %>% column_to_rownames("GEN") %>% select(sort(names(.))) %>% rownames_to_column("GEN")
View(CV6)
colnames(CV6)
list3 <- colnames(CV6)
list4 <- gsub("2", "", list3)
list4
colnames(CV6)
list3 <- gsub("1", "", colnames(CV6))
list3
list4 <- gsub("2", "", list3)
list5 <- gsub("2", "", list4)
list5
list3 <- gsub("1", "", colnames(CV6))
list4 <- gsub("2", "", list3)
list5 <- gsub("3", "", list4)
list5
colnames(CV6) <- list5
write.csv(CV6, "~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/quality_2022/pheno/Superiority_index/CV.csv", quote = F, row.names = F)
View(CV3)
round(CV3, digits = 3)
round(CV3[2:17], digits = 3)
CV3[2:17]
CV3 %>% mutate(across(2:17, round, 2))
CV3 %>% mutate(across(2:17, round, 3))
CV4 %>% mutate(across(2:17, round, 3))
CV4 %>% mutate(across(2:17, round, 2))
View(CV4)
CV3 <- CV3 %>% mutate(across(2:17, round, 3))
CV4 <- CV4 %>% mutate(across(2:17, round, 2))
CV6 <- inner_join(CV3, CV4, by = "GEN") %>% inner_join(., CV5, by = "GEN")  %>% column_to_rownames("GEN") %>% select(sort(names(.))) %>% rownames_to_column("GEN")
View(CV6)
list3 <- gsub("1", "", colnames(CV6))
list4 <- gsub("2", "", list3)
list5 <- gsub("3", "", list4)
colnames(CV6) <- list5
write.csv(CV6, "~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/quality_2022/pheno/Superiority_index/CV.csv", quote = F, row.names = F)
rm(list = ls())
library(tidyverse)
library(ggcorrplot)
library(patchwork)
setwd("~/Documents/git/Dreger_2022/raw_data/")
b1 <- read.csv("cols_rows1.csv")
head(b1)
a1 <- read.csv("pheno1.csv")
a2 <- read.csv("all_19.csv")
a3 <- read.csv("all_18.csv")
colnames(a1) # 18 and 19 cut 1
colnames(a2) # 19
colnames(a3) # 18
a1$Cutting <- 1
colnames(a1)[7] <- "Year"
Variety_a2 <- a2[,c(2,3)]
Variety_a3 <- a3[,c(2,3)]
common_ID <- intersect(Variety_a2$ID, Variety_a3$ID)
a2$Year <- 2019
a3$Year <- 2018
a1 <- a1[,-c(2:6,19:21)]
a1 <- a1[,c(1,14,2,3:11,13,12)]
colnames(a1)
a2 <- a2[,-c(1,3,12:15,20:22)]
a2 <- a2[,c(1,2,14,3:13)]
colnames(a2)
a3 <- a3[,-c(3,12:15)]
a3 <- a3[,c(2,3,1,4:14)]
colnames(a3)
a4 <- rbind(a1, a2, a3)
a4 <- a4 %>% dplyr::filter(ID %in% common_ID)
# %>% gather(key = "trait", value = "raw", 4:14)
a5 <- inner_join(b1, a4, by = "ID")
head(a5)
a5 <- a5 %>% unite("env", c(loc, Year, Cutting), sep = "_", remove = F)
lev1 <- colnames(a5)[1:10]
a5[,lev1] <- lapply(a5[,lev1], factor)
str(a5)
summary(a5$gen)
cc <- count(a5, gen, env)
a6 <- split(a5[,-1], a5$env)
View(a6)
names(a6)
names(a6)
View(a6[["ID_2018_1"]])
str(a6[[1]])
levels(a6[[1]]$gen)
View(a6[["OR_2018_2"]])
View(Variety_a2)
View(Variety_a3)
lev2
common_ID
