FQ0[[length(FQ0)+1]] <- pvals
}
data <- data[order(data$row, data$col), ]
m1 <- asreml::asreml(fixed = raw ~ gen,
random = ~ + block,
residual = ~id(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
blue <- predict.asreml(m1, classify='gen', vcov=TRUE)
pvals <- blue$pvals
sel <- matrix(1, ncol = 1, nrow = length(pvals$predicted.value))
sel[is.na(pvals$predicted.value), ] <- 0
vcov <- as.matrix(blue$vcov)
vcov <- vcov[sel == 1, sel == 1]
pvals$weight[sel == 1] <- diag(solve(vcov))
colnames(pvals) <- c("gen", "BLUE", "std.error", "status","weight")
pvals$weight1 <- (1/pvals$std.error)^2
head(data)
FQ0 <- list()
for (i in 1:length(a8)) {
# data <- a8[[1]]
data <- a8[[i]]
data <- data[order(data$row, data$col), ]
m1 <- asreml::asreml(fixed = raw ~ gen,
random = ~ + block,
residual = ~id(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
m2 <- asreml::asreml(fixed = raw ~ gen,
random = ~ + block,
residual = ~sar(row):sar(col),
data = data,
na.action = list(x = "include", y = "include"))
m3 <- asreml::asreml(fixed = raw ~ gen,
random = ~ + block,
residual = ~ar1(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
i1 <- infoCriteria.asreml(m1)
i2 <- infoCriteria.asreml(m2)
i3 <- infoCriteria.asreml(m3)
head(blue)
ifelse(i1$AIC < i2$AIC && i1$AIC < i3$AIC,
blue <- predict.asreml(m1, classify='gen', vcov=TRUE),
ifelse(i2$AIC < i1$AIC && i2$AIC < i3$AIC,
blue <- predict.asreml(m2, classify='gen', vcov=TRUE),
ifelse(i3$AIC < i1$AIC && i3$AIC < i2$AIC,
blue <- predict.asreml(m3, classify='gen', vcov=TRUE))))
pvals <- blue$pvals
sel <- matrix(1, ncol = 1, nrow = length(pvals$predicted.value))
sel[is.na(pvals$predicted.value), ] <- 0
vcov <- as.matrix(blue$vcov)
vcov <- vcov[sel == 1, sel == 1]
pvals$weight[sel == 1] <- diag(solve(vcov))
colnames(pvals) <- c("gen", "BLUE", "std.error", "status","weight")
pvals$weight1 <- (1/pvals$std.error)^2
FQ0[[length(FQ0)+1]] <- pvals
}
length(FQ0)
length(a8)
names(FQ0) <- names(a8)
FQ1 <-rbindlist(FQ0, use.names=TRUE, fill=TRUE, idcol="env")
head(FQ1)
head(b2)
FQ2 <- FQ1 %>% separate(1, c("loc", "year", "cut", "trait"), sep = "_", remove = T, convert = FALSE, extra = "merge") %>% unite("env", c(loc, year, cut), sep = "_", remove = F)
FQ2 <- inner_join(FQ2, b2, by = c("env","loc","year")) %>% inner_join(., b4, by = "gen")
FQ2 <- droplevels(FQ2)
FQ3 <- split(FQ2, FQ2$trait)
data <- FQ3[[1]]
data <- droplevels(data)
data[,c("loc","gen","year")] <- lapply(data[,c("loc","gen","year")], factor)
data1 <- na.omit(data)
head(data1)
M1 <- asreml::asreml(fixed = BLUE ~ loc,
random = ~corgh(loc):ar1(year):id(gen),
data = data1,
weights = weight,
na.action = list(x = "include", y = "include"),
family = asreml::asr_gaussian(dispersion = 1))
M1 <- update.asreml(M1)
wald.asreml(M1)
current.asrt <- as.asrtests(M1, NULL, NULL)
current.asrt <- rmboundary.asrtests(current.asrt, update = F)
diffs <- predictPlus(classify = "gen:loc:year",
asreml.obj = M1,
wald.tab = current.asrt$wald.tab,
present = c("gen","loc","year"))
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
str(pred1)
View(pred1)
lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1,interactive = F)
library(ggiraph)
library(ggiraph)
library(ggiraphExtra)
library(plyr)
ggPredict(lm1,interactive = F)
require(moonBook)
fit4=lm(NTAV~age*weight*HBP,data=radial)
summary(fit4)
ggPredict(fit4,interactive = F)
summary(fit4)
anova(fit4)
lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1,interactive = F)
diffs <- predictPlus(classify = "gen:loc:year",
asreml.obj = M1,
wald.tab = current.asrt$wald.tab,
present = c("gen","loc","year"))
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
diffs <- predictPlus(classify = "gen:loc",
asreml.obj = M1,
wald.tab = current.asrt$wald.tab,
present = c("gen","loc","year"))
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
lm1 <- lm(predicted.value ~ FD + loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1,interactive = F)
lm1 <- lm(predicted.value ~ FD * loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1,interactive = F)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
View(b4)
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","predicted.value")
View(b4)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" )
View(b4)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
View(b4)
colnames(b4)[2] <- "loc"
View(b4)
diffs <- predictPlus(classify = "gen:loc",
asreml.obj = M1,
wald.tab = current.asrt$wald.tab,
present = c("gen","loc","year"))
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
View(pred1)
View(b4)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
colnames(b4) <- c("gen","loc","FD")
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
b4[,c("gen","loc")] <- lapply(b4[,c("gen","loc")], factor)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
str(pred1)
lm1 <- lm(predicted.value ~ FD * loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1,interactive = F)
ggPredict(lm1, se = T, interactive = F)
lm1 <- lm(predicted.value ~ FD * loc, data = pred1)
summary(lm1)
anova(lm1)
diffs <- predictPlus(classify = "gen:loc:year",
asreml.obj = M1,
wald.tab = current.asrt$wald.tab,
present = c("gen","loc","year"))
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1, se = T, interactive = F)
pred1$year <- as.integer(as.character(pred1$year))
lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1, se = T, interactive = F)
lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1, se = T, interactive = F)
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1, se = T, interactive = F)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "all") %>% dplyr::select("gen","predicted.value")
colnames(b4)[2] <- "FD"
b4$gen <- as.factor(b4$gen)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
pred1$year <- as.integer(as.character(pred1$year))
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)
anova(lm1)
ggPredict(lm1, se = T, interactive = F)
summary(lm1)
anova(lm1)
str(pred1)
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$$r.squared
summary(lm1)$r.squared
summary(lm1)
anova(lm1)
anova(lm1)
summary(lm1)
ggPredict(lm1, se = T, interactive = F)
diffs <- predictPlus(classify = "gen:loc:year",
asreml.obj = M1,
wald.tab = current.asrt$wald.tab,
present = c("gen","loc","year"))
View(b4)
View(b4)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
str(pred1)
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)
summary(lm1)$r.squared
anova(lm1)
mod3.1 <- emmeans(lm1, pairwise ~ loc | year)
View(mod3.1)
mod3.1[["emmeans"]]
mod3.1[["contrasts"]]
mod3.1 <- emmeans(lm1, pairwise ~ year | loc)
mod3.1[["contrasts"]]
summary(lm1)
summary(lm1)$r.squared
anova(lm1)
aov(lm1)
anova(lm1)
aov(lm1)
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
View(ao1)
summary(mod3)$r.squared
summary(lm1)$r.squared
str(pred1)
pred1$year <- as.integer(as.character(pred1$year))
lm1 <- lm(predicted.value ~ FD + year * loc, data = pred1)
summary(lm1)$r.squared
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
colnames(b4) <- c("gen","loc","FD")
b4[,c("gen","loc")] <- lapply(b4[,c("gen","loc")], factor)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
str(pred1)
str(pred1)
lm1 <- lm(predicted.value ~ FD + year * loc, data = pred1)
summary(lm1)$r.squared
pred1$year <- as.integer(as.character(pred1$year))
lm1 <- lm(predicted.value ~ FD + year * loc, data = pred1)
summary(lm1)$r.squared
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "all") %>% dplyr::select("gen","predicted.value")
colnames(b4)[2] <- "FD"
b4$gen <- as.factor(b4$gen)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
str(pred1)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)
summary(lm1)$r.squared
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
View(ao1)
summary(lm1)$r.squared
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
colnames(b4) <- c("gen","loc","FD")
b4[,c("gen","loc")] <- lapply(b4[,c("gen","loc")], factor)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
pred1$year <- as.integer(as.character(pred1$year))
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
View(pred1)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
colnames(b4) <- c("gen","loc","FD")
b4[,c("gen","loc")] <- lapply(b4[,c("gen","loc")], factor)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
View(pred1)
View(b4)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
anova(lm1)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "all") %>% dplyr::select("gen","predicted.value")
colnames(b4)[2] <- "FD"
b4$gen <- as.factor(b4$gen)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
str(pred1)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
anova(lm1)
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
mod3.1 <- emmeans(lm1, pairwise ~ year | loc)
View(mod3.1)
mod3.1[["emmeans"]]
str(pred1)
lm1 <- lm(predicted.value ~ gen + FD * year * loc, data = pred1)
summary(lm1)$r.squared
anova(lm1)
lm1 <- lm(predicted.value ~ gen * FD * year * loc, data = pred1)
ao1 <- as.data.frame(anova(lm1))
summary(lm1)$r.squared
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
lm1 <- lm(predicted.value ~ gen + FD * year * loc, data = pred1)
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
View(ao1)
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.001] <- "***"
ao1$`Pr(>F)`[ao1$`Pr(>F)` > 0.05] <- "ns"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.05 & ao1$`Pr(>F)` > 0.01] <- "*"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.01 & pdif > 0.001] <- "**"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.01 & ao1$`Pr(>F)` > 0.001] <- "**"
View(ao1)
ao1 <- ao1[,c(1,2,3,6)]
lm1 <- lm(predicted.value ~ FD * year * loc + gen + gen:loc, data = pred1)
summary(lm1)
summary(lm1)$r.squared
lm1 <- lm(predicted.value ~ FD * year * loc + gen , data = pred1)
summary(lm1)$r.squared
lm1 <- lm(predicted.value ~ FD * year * loc + gen + gen:loc + gen:loc:year, data = pred1)
summary(lm1)$r.squared
lm1 <- lm(predicted.value ~ FD * year * loc + gen + gen:loc + gen:year, data = pred1)
summary(lm1)$r.squared
anova(lm1)
lm1 <- lm(predicted.value ~ FD * year * loc + gen * year * loc, data = pred1)
anova(lm1)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
View(ao1)
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.001] <- "***"
ao1$`Pr(>F)`[ao1$`Pr(>F)` > 0.05] <- "ns"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.05 & ao1$`Pr(>F)` > 0.01] <- "*"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.01 & ao1$`Pr(>F)` > 0.001] <- "**"
ao1 <- ao1[,c(1,2,3,6)]
View(ao1)
ao1$`Sum Sq` <- round(ao1$`Sum Sq`, 2)
summary(lm1)
ggPredict(lm1, se = T, interactive = F)
summary(lm1)$r.squared
anova(lm1)
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.001] <- "***"
ao1$`Pr(>F)`[ao1$`Pr(>F)` > 0.05] <- "ns"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.05 & ao1$`Pr(>F)` > 0.01] <- "*"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.01 & ao1$`Pr(>F)` > 0.001] <- "**"
ao1 <- ao1[,c(1,2,3,6)]
ao1$`Sum Sq` <- round(ao1$`Sum Sq`, 2)
View(ao1)
lm1 <- lm(predicted.value ~ FD * year * loc + gen, data = pred1)
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.001] <- "***"
ao1$`Pr(>F)`[ao1$`Pr(>F)` > 0.05] <- "ns"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.05 & ao1$`Pr(>F)` > 0.01] <- "*"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.01 & ao1$`Pr(>F)` > 0.001] <- "**"
ao1 <- ao1[,c(1,2,3,6)]
ao1$`Sum Sq` <- round(ao1$`Sum Sq`, 2)
write.csv(ao1, "~/Documents/git/Dreger_2022/statistical_results/Anova_FD_cofactor.csv", row.names = F, quote = F)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)
summary(lm1)$r.squared
anova(lm1)
ao1 <- as.data.frame(anova(lm1))
ao1 <- ao1 %>% rownames_to_column("term")
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.001] <- "***"
ao1$`Pr(>F)`[ao1$`Pr(>F)` > 0.05] <- "ns"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.05 & ao1$`Pr(>F)` > 0.01] <- "*"
ao1$`Pr(>F)`[ao1$`Pr(>F)` < 0.01 & ao1$`Pr(>F)` > 0.001] <- "**"
ao1 <- ao1[,c(1,2,3,6)]
ao1$`Sum Sq` <- round(ao1$`Sum Sq`, 2)
write.csv(ao1, "~/Documents/git/Dreger_2022/statistical_results/Anova_FD_cofactor.csv", row.names = F, quote = F)
emmip(lm1, machine ~ FD, cov.reduce = range)
emmip(lm1, FD ~ loc, cov.reduce = range)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
# lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
#
# lm1 <- lm(predicted.value ~ FD * year + loc, data = pred1)
#
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)
# ~~~~~~~~
lm1 <- lm(predicted.value ~ FD , data = pred1)
summary(lm1)
lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
summary(lm1)
summary(lm1)$r.squared
# ~~~~~~~~
lm1 <- lm(predicted.value ~ FD , data = pred1)
summary(lm1)$r.squared
summary(lm1)$adj.r.squared
# ~~~~~~~~
lm1 <- lm(predicted.value ~ FD , data = pred1)
summary(lm1)$adj.r.squared
lm1 <- lm(predicted.value ~ FD + year + loc, data = pred1)
summary(lm1)$adj.r.squared
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$adj.r.squared
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$adj.r.squared
pred1$year <- as.integer(as.character(pred1$year))
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
summary(lm1)$adj.r.squared
head(pred1)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
colnames(b4) <- c("gen","loc","FD")
b4[,c("gen","loc")] <- lapply(b4[,c("gen","loc")], factor)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
str(pred1)
View(pred1)
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
head(pred1)
summary(lm1)$r.squared
summary(lm1)$adj.r.squared
pred1$year <- as.integer(as.character(pred1$year))
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
summary(lm1)$adj.r.squared
summary(lm1)
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "ID" | env == "OR" | env == "WA" ) %>% dplyr::select("gen","env","predicted.value")
colnames(b4) <- c("gen","loc","FD")
b4 <- read.csv("~/Documents/git/Norberg_2020/Raw_data/Fall_Dormancy_CI.csv")
b4 <- b4 %>% dplyr::filter(env == "all") %>% dplyr::select("gen","predicted.value")
colnames(b4)[2] <- "FD"
b4$gen <- as.factor(b4$gen)
pred1 <- diffs[["predictions"]]
pred1 <- as.data.frame(pred1)
pred1 <- pred1 %>% inner_join(., b4, by = c("gen","loc"))
pred1 <- pred1 %>% inner_join(., b4, by = "gen")
str(pred1)
anova(lm1)
lm1 <- lm(predicted.value ~ FD * year * loc, data = pred1)
summary(lm1)$r.squared
summary(lm1)$adj.r.squared
summary(lm1)
anova(lm1)
fit4=lm(NTAV~age*weight*HBP,data=radial)
summary(fit4)
anova(fit4)
ggPredict(fit4,interactive = F)
?ggPredict
ggPredict(fit4,interactive = F, show.summary = T)
ggPredict(fit4,interactive = F, colorAsFactor = T)
ggPredict(fit4,interactive = F, colorAsFactor = F)
